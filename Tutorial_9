class Rational(n: Int, d: Int) {
  require(d != 0, "Denominator must not be zero")
  
  private val gcdValue: Int = gcd(n.abs, d.abs)
  val numer: Int = n / gcdValue
  val denom: Int = d / gcdValue

  private def gcd(a: Int, b: Int): Int =
    if (b == 0) a else gcd(b, a % b)

  def neg: Rational = new Rational(-numer, denom)

  override def toString: String = s"$numer / $denom"
}

object RationalExample {
  def main(args: Array[String]): Unit = {
    val x = new Rational(3, 4)
    val y = new Rational(1, 2)
    
    println("x: " + x) // Output: x: 3 / 4
    println("y: " + y) // Output: y: 1 / 2
    
    val negX = x.neg
    println("Negation of x: " + negX) // Output: Negation of x: -3 / 4
  }
}
---------------------------------------------------------------------------------
class Rational(n: Int, d: Int) {
  require(d != 0, "Denominator must not be zero")
  
  private val gcdValue: Int = gcd(n.abs, d.abs)
  val numer: Int = n / gcdValue
  val denom: Int = d / gcdValue

  private def gcd(a: Int, b: Int): Int =
    if (b == 0) a else gcd(b, a % b)

  def neg: Rational = new Rational(-numer, denom)
  
  def sub(other: Rational): Rational =
    new Rational(numer * other.denom - other.numer * denom, denom * other.denom)

  override def toString: String = s"$numer / $denom"
}

object RationalExample {
  def main(args: Array[String]): Unit = {
    val x = new Rational(3, 4)
    val y = new Rational(5, 8)
    val z = new Rational(2, 7)
    
    val result = x.sub(y).neg.sub(z)
    println("Result: " + result) // Output: Result: -47 / 224
  }
}
----------------------------------------------------------------------------------
class Account(initialBalance: Double, accountNumber: String) {
  private var balance: Double = initialBalance

  def deposit(amount: Double): Unit = {
    if (amount > 0) {
      balance += amount
      println(s"Deposited $amount. New balance: $balance")
    } else {
      println("Invalid deposit amount.")
    }
  }

  def withdraw(amount: Double): Unit = {
    if (amount > 0 && amount <= balance) {
      balance -= amount
      println(s"Withdrew $amount. New balance: $balance")
    } else {
      println("Invalid withdrawal amount or insufficient balance.")
    }
  }

  def transfer(amount: Double, toAccount: Account): Unit = {
    if (amount > 0 && amount <= balance) {
      balance -= amount
      toAccount.deposit(amount)
      println(s"Transferred $amount to account ${toAccount.accountNumber}. New balance: $balance")
    } else {
      println("Invalid transfer amount or insufficient balance.")
    }
  }

  def getBalance: Double = balance
}

object AccountExample {
  def main(args: Array[String]): Unit = {
    val account1 = new Account(1000.0, "A123")
    val account2 = new Account(500.0, "B456")
    
    account1.deposit(200.0)
    account1.withdraw(100.0)
    account1.transfer(150.0, account2)
    
    println(s"Account 1 balance: ${account1.getBalance}")
    println(s"Account 2 balance: ${account2.getBalance}")
  }
}
------------------------------------------------------------------------------------------
class Account(initialBalance: Double, accountNumber: String) {
  // ... (same as before)
}

class Bank(accounts: List[Account]) {
  def accountsWithNegativeBalance: List[Account] =
    accounts.filter(account => account.getBalance < 0)

  def totalBalance: Double =
    accounts.map(_.getBalance).sum

  def applyInterest(): Unit = {
    accounts.foreach(account => {
      if (account.getBalance > 0) {
        account.deposit(account.getBalance * 0.05)
      } else {
        account.withdraw(account.getBalance * 0.1)
      }
    })
  }
}

object BankExample {
  def main(args: Array[String]): Unit = {
    val account1 = new Account(100.0, "A123")
    val account2 = new Account(-200.0, "B456")
    val account3 = new Account(500.0, "C789")

    val bank = new Bank(List(account1, account2, account3))

    val negativeBalanceAccounts = bank.accountsWithNegativeBalance
    println("Accounts with negative balances: " + negativeBalanceAccounts)

    val totalBalance = bank.totalBalance
    println("Total balance of all accounts: " + totalBalance)

    bank.applyInterest()
    println("Final balances after applying interest:")
    bank.accounts.foreach(account => println(s"${account.accountNumber}: ${account.getBalance}"))
  }
}
